@{
    ViewBag.Title = "EditInfo";
}

<style>
    body {
        background-color: #eee;
    }

    .list-group {
        position: sticky;
        top: 175px;
    }

    .list-group-item img {
        max-height: 10vw;
    }

    .list-group-item {
        min-height: 60px;
        font-size: 1.2rem;
        font-weight: bolder;
    }

        .list-group-item.active {
            background-color: #5b468b;
        }

    .chargeTag {
        color: #fff;
    }

    .content {
        background-color: #fff;
    }

    .update {
        font-size: 1vw;
        color: #ccc;
    }

    .updateBtn {
        background-color: #5b468b;
        color: #fff;
    }

        .updateBtn:hover {
            background-color: #7e68b3;
            color: #fff;
        }

        .updateBtn:active {
            background-color: #564385;
            color: #fff;
        }

    .profile {
        position: relative;
        display: inline-block;
    }

        .profile:hover .camera {
            opacity: 0.9; /* 鼠標懸停時顯示 */
        }

    .camera {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

    .readonly-field {
        background-color: #e9ecef; /* 灰色背景 */
        color: #6c757d; /* 淡灰色文字 */
        cursor: not-allowed; /* 滑鼠指標變成禁止符號 */
    }

    .confirmBtn {
        color: #fff;
        background-color: #5b468b;
    }

        .confirmBtn:hover {
            color: #fff;
            background-color: #342557 !important;
        }

    .alertImg {
        animation: squish 0.5s ease;
        transform-origin: bottom;
    }


    .modal {
        position: fixed;
        top: 0;
        left: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-content {
        width: 300px;
    }
</style>

<body>
<div id="app">
    @* 警告modal *@
    <div class="modal" v-if="modal.isModalVisible">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0 mt-0">
                    <button type="button"
                            class="btn-close"
                            v-on:click="modal.hideModal()"></button>
                </div>
                <div class="text-center">
                    <img :src="modal.img"
                         alt="point"
                         class="alertImg mt-4"
                         style="max-width: 100px" />
                    <div class="modal-body">
                        <h5><pre class="mb-0" style="line-height:30px">{{modal.message}}</pre></h5>
                    </div>
                </div>

                <div class="text-center mb-4" v-if="modal.isChange">
                    <a class="confirmBtn btn btn-md " v-on:click="updateProfile">
                        確認
                    </a>
                </div>
                <div class="text-center mb-4" v-if="!modal.isChange">
                    <button class="confirmBtn btn btn-md" v-on:click="modal.hideModal()">
                        返回
                    </button>
                </div>
            </div>
        </div>
    </div>
    @* 警告modal *@
    <div class="container">
        <div class="row">
            <div class="col-4 mt-3 mb-3">
                <div class="text-center list-group align-middle">
                    <div class="list-group-item">
                        <div class="profile btn border-0">
                            <form id="imageForm" method=post enctype="multipart/form-data">
                                <input type="file" accept="image/*" v-on:change="updateAvatar" style="display: none;" id="fileInput" />
                                <img :src="`/images/${member.avatar}`"
                                     alt="profilePic"
                                     class="avatarA img-fluid m-3" />
                                <img src="~/images/camera.png"
                                     alt="editProfile"
                                     class="camera img-fluid "
                                     v-on:click="triggerFileInput" />
                            </form>
                        </div>

                        <h4 class="fw-bolder">{{member.name}}</h4>
                        <p>
                            會員點數：<span class="specialCount">{{member.point}}</span>
                            pt
                            <a :href="`@Url.Action("TopUp", "Members")?returnUrl=@Url.Action("EditInfo", "Members")`" 
                               class="chargeTag btn btn-warning p-1 ms-2">
                                儲值
                            </a>
                        </p>

                    </div>
                    <a href="#" class="list-group-item list-group-item-action active align-content-center border-0 rounded" aria-current="true">
                        會員資料
                    </a>
                    <a href="/Members/MyCourses" class="list-group-item list-group-item-action align-content-center border-0 rounded" aria-current="true">
                        我的課程
                    </a>
                    <a href="/Members/MyCollections" class="list-group-item list-group-item-action align-content-center border-0 rounded" aria-current="true">
                        我的收藏
                    </a>
                    <a href="/Members/MyOrders" class="list-group-item list-group-item-action align-content-center border-0 rounded" aria-current="true">
                        購買紀錄
                    </a>
                </div>
            </div>
            <div class="content col-8 mt-3 mb-3 rounded">
                <section class="m-4">
                    <div class="d-flex justify-content-between">
                        <h4 class="fw-bolder">會員資料</h4>
                        <h6 class="update fw-bolder">
                            上次修改時間 {{ member.updatedDate }} <!-- 這裡可以使用 computed 來格式化 -->
                        </h6>
                    </div>

                    <div class="d-flex flex-wrap">
                        <div class="mb-3 col-6 p-2">
                            <label for="name" class="form-label fw-bolder">姓名</label>
                            <input type="text" class="form-control" id="name" v-model="member.name" :placeholder="member.name" />
                        </div>
                        <div class="mb-3 col-6 p-2">
                            <label for="gender" class="form-label fw-bolder">性別</label>
                            <select v-model="member.gender" class="form-select" aria-label="Default select example">
                                <option selected>選擇性別</option>
                                <option value="1">男</option>
                                <option value="2">女</option>
                                <option value="3">其他</option>
                            </select>
                        </div>
                        <div class="mb-3 col-6 p-2">
                            <label for="phone" class="form-label fw-bolder">電話</label>
                            <input type="text" class="form-control" id="phone" :placeholder="member.phone" v-model="member.phone" />
                        </div>
                        <div class="mb-3 col-6 p-2">
                            <label for="email" class="form-label fw-bolder">信箱</label>
                            <input type="email" class="form-control readonly-field" id="email" :placeholder="member.email" v-model="member.email" disabled />
                        </div>
                        <div class="mb-3 col-6 p-2">
                            <label for="intro" class="form-label fw-bolder">個人簡介</label>
                            <textarea class="form-control" id="intro" rows="3" :placeholder="member.intro" v-model="member.intro"></textarea>
                        </div>
                    </div>

                    @*<div v-if="message" class="alert" :class="messageType">{{ message }}</div>*@


                    <div class="text-end">
                        <a href="@Url.Action("UpdatePassword", "Members")" class="changePwd btn btn-outline-danger me-2" v-on:click="resetPassword">重設密碼</a>

                        <button class="updateBtn btn" v-on:click="confirmUpdate">修改</button>

                    </div>
                </section>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script src="~/Scripts/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/vue.global.js"></script>
    <script src="~/Scripts/myheader.js"></script>
    <script>
    @using Chimo.WebAPI.Site.Models
    const { createApp, ref, onMounted } = Vue;

    const config = {
        setup() {
            const modal = ref({
                message: "",
                img: "",
                isChange: false,
                isModalVisible: false,
                showModal() {
                    this.isModalVisible = true;
                },
                hideModal() {
                    this.isModalVisible = false;
                },
            });

            const member = ref({
                id: 0,
                name: "",
                avatar: "",
                point: 0,
                gender: 0,
                phone: "",
                email: "",
                intro: "",
                updatedDate: "",
            });

            const originalMember = ref({ ...member.value });

            const fetchMemberProfile = async () => {
                try {
                    const token = '@AuthHelper.GetTokenFromCookie()';
                    const decodedMember = decodeToken(token);

                    // 確保這裡的屬性名稱正確
                    member.value.id = decodedMember.Id;
                    member.value.name = decodedMember.unique_name;
                    member.value.email = decodedMember.Email;
                    member.value.point = decodedMember.Point;
                    member.value.avatar = `../images/` + decodedMember.ProfileImage;
                    member.value.intro = decodedMember.Intro;
                    member.value.gender = decodedMember.Gender;
                    member.value.updatedDate = formatDate(decodedMember.updatedDate);

                    originalMember.value = { ...member.value };

                    const response = await fetch(`/api/profile/${member.value.id}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('網路請求失敗');
                    }

                    const data = await response.json();
                    Object.assign(member.value, data);
                    member.value.updatedDate = formatDate(data.updatedDate);
                    originalMember.value = { ...member.value };
                } catch (error) {
                    console.error("獲取會員資料失敗:", error);
                }
            };

            const triggerFileInput = () => {
                const fileInput = document.getElementById('fileInput');
                fileInput.click();
            };

            const updateAvatar = async (event) => {
                const file = event.target.files[0];
                if (!file) {
                    alert("請選擇檔案！");
                    return;
                }

                const formData = new FormData();
                formData.append("file", file);

                try {
                    const response = await fetch(`/api/uploadProfileImage/${member.value.id}`, {
                        method: "POST",
                        body: formData,
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || "上傳失敗，請稍後再試");
                    }

                    const result = await response.json();
                    document.cookie = `jwtToken=${result.token}; path=/; secure`;
                    member.value.avatar = `${result.profileImage}`;
                    window.location.reload();

                    alert('頭像更新成功');
                } catch (error) {
                    alert(`上傳失敗: ${error.message}`);
                }
            };

            const decodeToken = (token) => {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c =>
                    '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            };

            const formatDate = (dateString) => {
                const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
                const date = new Date(dateString);
                return date.toLocaleDateString('zh-TW', options).replace(/\//g, '/');
            };

            const confirmUpdate = () => {
                const changedFields = [];
                for (let key in member.value) {
                    if (member.value[key] !== originalMember.value[key]) {
                        if (key === 'name') changedFields.push('姓名');
                        if (key === 'phone') changedFields.push('電話');
                        if (key === 'gender') changedFields.push('性別');
                        if (key === 'intro') changedFields.push('個人簡介');
                    }
                }

                if (changedFields.length > 0) {
                    modal.value.message = `以下欄位已更改：\n${changedFields.join(', ')}\n確定要提交變更嗎？`;
                    modal.value.isChange = true;
                    modal.value.img = "../images/alert.gif";
                    modal.value.showModal();
                } else {
                    modal.value.message = "沒有欄位被更改";
                    modal.value.isChange = false;
                    modal.value.img = "../images/alert.gif";
                    modal.value.showModal();
                }
            };

            const updateProfile = async () => {
                try {
                    const token = '@AuthHelper.GetTokenFromCookie()';
                    const response = await fetch(`/api/profile/${member.value.id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(member.value)
                    });

                    if (!response.ok) {
                        throw new Error('更新資料失敗');
                    } else {
                        modal.value.message = "更新成功";
                        modal.value.img = "../images/ok.gif";
                        originalMember.value = { ...member.value };
                        modal.value.isChange = false;
                    }
                } catch (error) {
                    console.error("更新會員資料失敗:", error); 
            
                }
            };

            const resetPassword = () => {
                console.log("重設密碼功能尚未實作");
            };

            onMounted(fetchMemberProfile);

            return { member, confirmUpdate, updateProfile, resetPassword, modal, updateAvatar, triggerFileInput };
        }
    };

    const app = createApp(config);
    app.mount("#app");
    </script>
}

</body>
