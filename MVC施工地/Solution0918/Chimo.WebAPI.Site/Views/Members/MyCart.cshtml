
@{
    ViewBag.Title = "MyCart";
}

<link href="~/Content/media.css" rel="stylesheet" />

<style>

    .title {
        max-height: 100px;
        overflow: auto;
    }

    .cart img {
        transition: transform 0.1s ease;
    }

    .cart img:hover {
        transform: scale(1.05);
        cursor: pointer;
    }

    .delete:hover {
        cursor: pointer;
    }

    details {
        max-height: 300px;
        overflow: auto;
        scrollbar-width: thin;
        scrollbar-color: #5b468b #FFF;
    }

    summary {
        color: #5b468b;
        position: sticky;
        top:0;
        background: white;
        z-index: 1;
    }
</style>


<div id="app">

    @using Chimo.WebAPI.Site.Models
    @{
        bool isLoggedIn = AuthHelper.IsLoggedIn(Request);  // 檢查是否已登入
        var token = AuthHelper.GetTokenFromCookie();
        Chimo.WebAPI.Site.Models.EFModels.Member member = null;

        // 如果 token 存在，則解碼並獲取會員資料
        if (isLoggedIn)
        {
            member = JwtUtility.DecodeToken(token);
        }

        <div class="container">
            <h2 class="mt-4 fw-bolder mb-4">購物車</h2>
            <div class="row">
                <div class="cart col-sm-12 col-md-7 col-lg-8">
                    <div v-for="card in cartItems"
                         :key="card.id"
                         class="d-lg-flex align-items-start mb-4 p-4 ps-0 border-bottom">
                        <img :src="formatThumbnailRoute(card.course.thumbnail,'course')"
                             alt="thumbnail"
                             class="img-fluid rounded thumbnail col-md-12 col-lg-6 mb-3" />
                        <div class="col-md-12 col-lg-5 ms-lg-3 cartContent" >
                            <h4 class="mb-3 me-4 title fw-bolder">{{card.course.title}}</h4>
                            <p href="#" class="teacher mt-3 mb-3">教師 | {{card.course.teacher.name}}</p>
                            <h2 class="mt-3">NT${{card.course.price}}</h2>
                        </div>
                        <div class="deleteContainer">
                            <img src="~/images/Delete.png"
                                 alt="delete"
                                 class="delete"
                                 v-on:click="handleDelete(card.id)" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-5 col-lg-4">

                    <div class="container p-3 border rounded shadow isPc confirmBuying">
                        <h3 class="fw-bolder mt-2">訂單明細</h3>
                        <hr class="mt-3" />
                        <details class="ms-2">
                            <summary class="fw-bolder pointer-event">查看詳細訂單明細</summary>
                            <div class="container mt-4 d-flex fw-bolder justify-content-around"
                                 v-for="card in cartItems">
                                <h5 class="col-8">{{card.course.title}}</h5>
                                <p class="col-4 text-end">NT${{card.course.price}}</p>
                            </div>
                        </details>
                        <div class="container d-flex justify-content-between">
                            <h3 class="mt-3 fw-bolder">總金額</h3>
                            <h3 class="mt-3 text-end fw-bolder">NT${{totalPrice}}</h3>
                        </div>
                        <hr />
                        <div class="row me-3">
                            <button class="btn btn-lg btn-warning p-3 m-3 mt-2"
                                    onclick="window.location.href='@Url.Action("Checkout", "Members")'"
                                    v-if="totalPrice>0">
                                前往結帳
                            </button>

                            <button class="btn btn-lg btn-warning p-3 m-3 mt-2"
                                    v-if="totalPrice===0"
                                    v-on:click="handleNothingInCart">
                                前往結帳
                            </button>
                        </div>

                    </div>
                </div>
            </div>
            <div class="container text-end rounded border shadow isMobile">
                <h3 class="mt-3 fw-bolder">總金額</h3>
                <h3 class="mt-3 fw-bolder">NT${{totalPrice}}</h3>
                <hr />
                <div class="row m-3">
                    <button class="btn btn-lg btn-warning"
                            onclick="window.location.href='@Url.Action("Checkout", "Members")'"
                            v-if="totalPrice>0">
                        前往結帳
                    </button>
                    <button class="btn btn-lg btn-warning mt-5"
                            v-if="totalPrice===0"
                             v-on:click="handleNothingInCart">
                        前往結帳
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@section scripts{
    <script src="~/Scripts/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/vue.global.js"></script>
    <script src="~/Scripts/myheader.js"></script>
    <script>
        const { createApp, ref, onMounted } = Vue;
        const config = {
            setup() {

                const memberId =  @Html.Raw(Json.Encode(member?.Id));
                const cartItems = ref([]);

                const fetchCartItems = async () => {
                    try {
                        const response = await fetch(`/api/carts/${memberId}`, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        });

                        // 確保請求成功後解析 JSON
                        if (response.ok) {
                            const data = await response.json();
                            if (data.length === 0) return;

                            cartItems.value = data.cartItems;
                            totalPrice.value = getTotalPrice(cartItems.value);
                            
                        } else {
                            console.error('fetch 購物車清單失敗:', response.statusText);
                        }
                    } catch (error) {
                        console.error('fetch 購物車清單失敗:', error);
                    }
                };

                const handleDelete = async (cartItemId) => {
                    try {
                        const response = await fetch(`/api/carts/remove/${cartItemId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        });

                        if (response.ok) {
                            // 從 cartItems 中移除被刪除的項目
                            cartItems.value = cartItems.value.filter((item) => item.id !== cartItemId);
                            totalPrice.value = getTotalPrice(cartItems.value); // 更新總價
                            console.log("成功移除購物車內容");
                        } else {
                            const errorMessage = await response.text();
                            console.error('移除購物車內容失敗:', errorMessage);
                        }
                    } catch (error) {
                        console.error('移除購物車內容時發生錯誤:', error);
                    }
                };

                const getTotalPrice = (cards) => {
                    return cards.reduce((total, card) => total + card.course.price, 0);
                };

                const formatThumbnailRoute = (thumbnailPath, target = "people") => {

                    thumbnailPath = handleThumbnailNull(thumbnailPath, target);

                    if (thumbnailPath.startsWith("~/")) {
                        // 將 "~/" 替換為實際的程式根目錄
                        return thumbnailPath.replace("~", window.location.origin);
                    }
                    return thumbnailPath;
                };

                const handleThumbnailNull = (path, target) => {
                    if (path == null || path.length == 0) { // 如果thumbnail是null 或沒有內容

                        // 判斷target是人(teacher 或 member) 或是課程，給予不同的default圖片路徑
                        target === "people" ? path = "~/images/profilePic.PNG"
                            : path = "~/images/thumbnail.jpg"; // 設成default thumbnail
                    }

                    return path;
                }

                const handleNothingInCart = () => {
                    alert("目前購物車裡沒有內容");
                }

                const totalPrice = ref(0);

                onMounted(() => {
                    fetchCartItems();
                });

                return {
                    cartItems, handleDelete, totalPrice, formatThumbnailRoute,
                    handleNothingInCart};
            },
        };
        const app = createApp(config);
        app.mount("#app");
    </script>
}