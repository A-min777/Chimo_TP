
@{
    ViewBag.Title = "MyCourses";
}

<style>
    body {
        background-color: #eee;
    }

    .list-group {
        position: sticky;
        top: 175px;
    }

    .list-group-item img {
        max-height: 10vw;
    }

    .list-group-item {
        min-height: 60px;
        font-size: 1.2rem;
        font-weight: bolder;
    }

        .list-group-item.active {
            background-color: #5b468b;
        }

    .chargeTag {
        color: #fff;
    }

    .content {
        background-color: #fff;
    }

    

    .mycard p {
        font-weight: bolder;
        font-size: large;
    }

    .title {
        min-height: 60px;
        max-height: 60px;
        overflow: hidden;
    }

        .title:hover {
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #5b468b #fff;
        }

    .mycard img {
        width: 100%;
        object-fit: cover;
    }

    .mycard .tag {
        background-color: #5b468b;
        color: #fff;
    }

    .thumbnail {
        transition: transform 0.3s ease;
        will-change: transform;
    }

        .thumbnail:hover {
            transform: scale(1.1);
        }

    .refund {
        align-items: baseline;
    }

    .avatarA {
        border-radius: 50%;
    }

    .searchBtn {
        background-color: #5b468b;
        color: #fff;
    }

        .searchBtn:hover {
            background-color: #2b1b41;
            color: #fff;
        }

    .confirmBtn {
        color: #fff;
        background-color: #5b468b;
    }

        .confirmBtn:hover {
            color: #fff;
            background-color: #342557 !important;
        }

    .alertImg {
        animation: squish 0.5s ease;
        transform-origin: bottom;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-content {
        width: 300px;
    }
</style>
<body>
    <div id="app">
        @* 警告modal *@
        <div class="modal" v-if="modal.isModalVisible">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header border-0 pb-0 mt-0">
                        <button type="button"
                                class="btn-close"
                                v-on:click="modal.hideModal()"></button>
                    </div>
                    <div class="text-center">
                        <img :src="modal.img"
                             alt="point"
                             class="alertImg mt-4"
                             style="max-width: 100px" />
                        <div class="modal-body">
                            <h5><pre class="mb-0" style="line-height:30px">{{modal.message}}</pre></h5>
                        </div>
                    </div>
                    <div class="text-center mb-4" v-if="modal.isRefundSuccessed">
                        <button class="confirmBtn btn btn-md"
                                v-on:click="modal.reload()">
                            返回
                        </button>
                    </div>

                </div>
            </div>
        </div>
        @* 警告modal *@
        <div class="container">
            <div class="row">
                <div class="col-4 mt-3 mb-3">
                    <div class="text-center list-group">
                        <div class="list-group-item">
                            <img :src="`/images/${member.avatar}`"
                                 alt="profile"
                                 class="avatarA img-fluid m-3" />
                            <h4 class="fw-bolder">{{member.name}}</h4>
                            <p>
                                會員點數：<span class="specialCount">{{member.point}}</span>
                                pt
                                <a :href="`@Url.Action("TopUp", "Members")?returnUrl=@Url.Action("MyCourses", "Members")`"
                                   class="chargeTag btn btn-warning p-1 ms-2">
                                    儲值
                                </a>
                            </p>
                        </div>

                        <a href="/Members/EditInfo"
                           class="list-group-item list-group-item-action align-content-center border-0 rounded"
                           aria-current="true">
                            會員資料
                        </a>
                        <a href="#"
                           class="list-group-item list-group-item-action active align-content-center border-0 rounded"
                           aria-current="true">
                            我的課程
                        </a>
                        <a href="/Members/MyCollections"
                           class="list-group-item list-group-item-action align-content-center border-0 rounded"
                           aria-current="true">
                            我的收藏
                        </a>
                        <a href="/Members/MyOrders"
                           class="list-group-item list-group-item-action align-content-center border-0 rounded"
                           aria-current="true">
                            購買紀錄
                        </a>
                    </div>
                </div>
                <div class="content col-8 mt-3 mb-3 rounded">
                    <section class="m-4">
                        <div class="d-flex justify-content-between">
                            <h4 class="fw-bolder">我的課程</h4>
                        </div>
                        <hr />
                        <div :class="['mt-5 text-center notFound' ,{'d-none': courses.length != 0 }]">
                            <img src="../images/notFoundImg.png" alt="notFound" class="img-fluid mb-3" style="width:20vw" />
                            <h5 class="fw-bolder mb-3">還沒有購買任何課程</h5>
                            <a href="@Url.Action("index", "Home")" class="searchBtn btn btn-lg">探索課程</a>
                        </div>
                        <div class="d-flex flex-wrap">
                            <div class=" d-flex flex-wrap">

                                <div v-for="card in courses"
                                     :key="card.id"
                                     class="mycard col-lg-4 col-md-6 col-sm-12 p-3 pb-5 ps-0">
                                    <a :href="`@Url.Action("ViewProduct", "Products")/${card.id}`">
                                        <img :src="card.img ? `../images/${card.img}` : '../images/thumbnail.jpg'"
                                             alt="courses-thumbnail "
                                             class="thumbnail pb-2 img-fluid rounded" />
                                    </a>
                                    <div class="prodct-info">
                                        <small class="tag p-1 rounded-1 fw-bolder">課程</small>
                                        <p class="title pt-1">{{card.title}}</p>
                                        <small>{{card.teacher.name}}</small>
                                    </div>
                                    <p class="price border-top border-bottom pt-2 pb-2">
                                        NT${{card.price}}
                                    </p>
                                    <div class="refund d-flex justify-content-between align-items-center">
                                        <small>購買日期：{{card.buyDate}}</small>
                                        <button class="btn btn-danger text-nowrap me-1"
                                                v-if="getDateDifference(card.buyDate) < 4"
                                                v-on:click="handleRefund(card.id)">
                                            退貨
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        </div>
    </div>

@section scripts{
    <script src="~/Scripts/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/vue.global.js"></script>
    <script src="~/Scripts/myheader.js"></script>
    <script>
    @using Chimo.WebAPI.Site.Models
    const { createApp, ref, onMounted } = Vue;

    const config = {
        setup() {
            const member = ref({
                id: 0,
                name: "",
                avatar: "",
                point: 0,
            });

            const modal = ref({
                message: "",
                img: "",
                isRefundSuccessed: false,
                isModalVisible: false,
                showModal() {
                    this.isModalVisible = true;
                },
                hideModal() {
                    this.isModalVisible = false;
                },
                reload() {
                    location.reload();
                }
            });

            const decodeToken = (token) => {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c =>
                    '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            };

            const token = '@AuthHelper.GetTokenFromCookie()';
            const decodedMember = decodeToken(token);
            member.value.id = decodedMember.Id;
            member.value.name = decodedMember.unique_name;
            member.value.point = decodedMember.Point;
            member.value.avatar = decodedMember.ProfileImage;

            const courses = ref([]); // 存放會員課程資料

            const fetchMemberCourses = async () => {
                try {
                    const response = await fetch(`/api/courses/${member.value.id}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('獲取課程資料失敗');
                    }

                    const data = await response.json();
                    courses.value = data.map(course => ({
                        id: course.id, // 課程唯一識別碼
                        categoryId: course.categoryId,
                        teacherId: course.teacherId,
                        title: course.title,
                        description: course.description,
                        price: course.price,
                        img: course.thumbnail,
                        status: course.status,
                        createdDate: course.createdDate,
                        updatedDate: course.updatedDate,
                        teacher: {
                            id: course.teacher.id,
                            name: course.teacher.name,
                            profileImage: course.teacher.profileImage,
                            intro: course.teacher.intro,
                            email: course.teacher.email
                        },
                        buyDate: new Date(course.createdDate).toLocaleDateString() // 購買日期
                    }));
                } catch (error) {
                    console.error("獲取課程資料失敗:", error);
                }
            };

            const getDateDifference = (date) => {
                const currentDate = new Date();
                const targetDate = new Date(date);
                const diffTime = currentDate - targetDate; // 毫秒差
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); // 毫秒差轉天數差
                return diffDays;
            };

            const handleRefund = async (courseId) => {
                try {
                    const response = await fetch(`/api/checkout/refund`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            courseId: courseId,
                            memberId: member.value.id,
                        })
                    });

                    if (response.ok) {
                        modal.value.message = "正在處理...";
                        modal.value.img = "/images/loading.gif";
                        modal.value.showModal();

                        setTimeout(() => {
                            modal.value.message = "退費成功";
                            modal.value.img = "/images/ok.gif";
                            modal.value.isRefundSuccessed = true;
                            modal.value.showModal();
                        }, 2500);
                    } else {
                        const errorMessage = await response.text();
                        modal.value.message = '退費失敗: ' + errorMessage;
                        modal.value.img = "/images/alert.gif";
                        modal.value.isRefundSuccessed = false;
                        modal.value.showModal();
                    }
                } catch (error) {
                    modal.value.message = '退費時發生錯誤:', error;
                    modal.value.img = "/images/error.gif";
                    modal.value.isRefundSuccessed = false;
                    modal.value.showModal();
                }
            };

            const fetchMemberPoint = async () => {
                try {
                    const response = await fetch(`/api/getMemberPoint/${member.value.id}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('網路請求失敗');
                    }

                    const data = await response.json();
                    member.value.point = data.memberPoint; // 將回傳的點數值儲存在 member 的 point 屬性中
                } catch (error) {
                    console.error("獲取會員資料失敗:", error);
                }
            };

            const fetchMemberImage = async () => {
                try {
                    const response = await fetch(`/api/getMemberImage/${member.value.id}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('網路請求失敗');
                    }

                    const data = await response.json();
                    member.value.avatar = data.memberImage;
                } catch (error) {
                    console.error("獲取會員資料失敗:", error);
                }
            };

            onMounted(async () => {
                await fetchMemberCourses(); // 獲取會員課程資料
                await fetchMemberPoint();
                await fetchMemberImage();
            });

            return { member, courses, handleRefund, getDateDifference,modal };
        }
    };

    const app = createApp(config);
    app.mount("#app");
    </script>

}
</body>