
@{
    ViewBag.Title = "ProductInfo";
}

@using Chimo.WebAPI.Site.Models

@{
    bool isLoggedIn = AuthHelper.IsLoggedIn(Request);  // 檢查是否已登入
    ViewData["IsLoggedIn"] = isLoggedIn;
    // 從 Cookie 中獲取 JWT
    var token = AuthHelper.GetTokenFromCookie();
    Chimo.WebAPI.Site.Models.EFModels.Member member = null;

    // 如果 token 存在，則解碼並獲取會員資料
    if (isLoggedIn)
    {
        member = JwtUtility.DecodeToken(token);
    }
}



<style>

    a {
        text-decoration: none;
    }

    .product {
        background-color: #2b1b41;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        float: left;
        padding-right: var(--bs-breadcrumb-item-padding-x);
        color: #fff;
        content: var(--bs-breadcrumb-divider, ">");
    }

    .breadcrumb a {
        text-decoration: none;
        color: #fff;
    }


    .accordion-body {
        background-color: #eeebf8;
    }

    .accordion-button:not(.collapsed) {
        background-color: #5b468b;
        color: #fff;
        border-radius: 10px;
    }

        .accordion-button:not(.collapsed)::after {
            color: #fff;
        }

    .accordion-button:hover {
        background-color: #5b468b;
        color: #fff;
    }


    .cartIcon {
        object-fit: contain;
        max-height: 20px;
    }


    .avatarA {
        border-radius: 50%;
    }

    .confirmBtn {
        color: #fff;
        background-color: #5b468b;
    }

        .confirmBtn:hover {
            color: #fff;
            background-color: #342557 !important;
        }

    .alertImg {
        animation: squish 0.5s ease;
        transform-origin: bottom;
    }


    .modal {
        position: fixed;
        top: 0;
        left: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-content{
        width:300px;
    }
</style>

<div id="app">
    <div class="modal" v-if="isModalVisible" v-on:click.self="hideModal">
        <div class="modal-dialog"
             :class="{'slide-in': isModalVisible, 'slide-out': !isModalVisible}">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0 mt-0">
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Close"
                            v-on:click="hideModal"></button>
                </div>
                <div class="text-center">
                    <img src="~/images/alert.gif"
                         alt="point"
                         class="alertImg mt-4"
                         style="max-width: 100px" />
                    <div class="modal-body">請先完成登入後再進行操作</div>
                </div>

                <div class="text-center mb-4">
                    <a :href="`@Url.Action("Login", "Login")`"
                       class="confirmBtn btn btn-md ">
                        登入
                    </a>
                </div>
            </div>
        </div>
    </div>
    <!-- 頁首課程預覽 bg-->
    <div class="product mb-4 pt-3">
        <div class="container">
            <div class="d-flex justify-content-between align-items-center">
                <nav aria-label="breadcrumb " class="root pt-3">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/Home/Index">首頁</a></li>
                        <li class="breadcrumb-item"><a href="#">分類</a></li>
                        <li class="breadcrumb-item active text-light" aria-current="page">
                            {{courseContents.title}}
                        </li>
                    </ol>
                </nav>
                <img :src="formatThumbnailUrl(Bookmark.currentImage())" alt="bookIcon" class="btn btn-sm img-fluid mb-3 mt-1 me-0" style="max-height:38px" v-on:click="toggleBookmark" />
            </div>
            <div class="row pb-5 justify-content-between" v-if="courseDetail && courseDetail.teacher">
                <div class="col-xs-12 col-md-6 col-lg-7 p-3">
                    <small class="text-light">教師 | {{courseDetail.teacher.name}}</small>
                    <hr class="border" />
                    <h1 class="fw-bolder text-light">{{courseDetail.title}}</h1>
                    <div class="d-lg-flex">
                        <p class="fs-1 fw-bolder text-light">NT${{courseDetail.price}}</p>
                        @if (ViewData["IsLoggedIn"] != null && (bool)ViewData["IsLoggedIn"])
                        {
                            <a :href="`@Url.Action("Checkout", "Members")`" 
                               class="buyBtn btn btn-xxl btn-warning fs-1 fw-bolder text-dark ms-lg-3">
                                立即購買
                            </a>}
                        else
                        {
                            <button class="buyBtn btn btn-xxl btn-warning fs-1 fw-bolder text-dark ms-lg-3" v-on:click="showModal">
                                立即購買
                            </button>
                        }
                    </div>
                </div>
                <div class="col-xs-12 col-md-6 col-lg-4">
                    <video ref="videoPlayer" controls :src="formatVideoRoute(courseFirstVideo)" muted type="video/mp4" class="container rounded-5"></video>
                </div>
            </div>
        </div>
    </div>
    <!-- 頁首課程預覽 end -->

    <div class="container">
        <div class="row justify-content-between">
            <!-- 左側資訊 bg-->
            <section class="col-md-7 col-lg-8 pe-5">
                <h2 class="fw-bolder">課程資訊</h2>
                <hr />
                <ul class="list-group list-group-horizontal">
                    <li class="list-group-item me-5 border-0">
                        總章節：{{courseChapterCount}}章
                    </li>
                    <li class="list-group-item border-0">
                        報名人數：{{courseBuyerCount}}人
                    </li>
                </ul>
                <hr />
                <h2 class="fw-bolder">課程介紹</h2>
                <p>{{courseDetail.description}}</p>
                <hr />

                <h2 class="fw-bolder">章節預覽</h2>
                <div v-for="catalog in courseContents.courseCatalogs"
                     :key="catalog.id"
                     class="accordion rounded-3 mb-4"
                     :id="'accordionExample-' + catalog.id">

                    <div class="accordion-item">
                        <div class="accordion-header">
                            <button class="accordion-button collapsed"
                                    type="button"
                                    data-bs-toggle="collapse"
                                    :data-bs-target="'#flush-collapse-' + catalog.id"
                                    aria-expanded="false"
                                    :aria-controls="'flush-collapse-' + catalog.id">
                                {{ catalog.name }}
                            </button>
                        </div>
                        <div :id="'flush-collapse-' + catalog.id"
                             class="accordion-collapse collapse"
                             data-bs-parent="#accordionExample">
                            <div v-for="chapter in catalog.courseChapters"
                                 :key="chapter.id"
                                 class="accordion-body fw-bolder">
                                {{ chapter.name }}
                            </div>
                        </div>
                    </div>
                </div>

                <hr />
                <h2 class="fw-bolder">教師資訊</h2>
                <div class="teacher row mb-3 mt-2"
                     v-if="courseDetail && courseDetail.teacher">
                    <img :src="formatThumbnailUrl(courseDetail.teacher.profileImage)"
                         alt="taPic"
                         class="avatarA col-md-5 col-lg-3 col-sm-3 " />
                    <div class="teacherInfo m-2 col-md-6 col-sm-6 text-center text-sm-start"
                         style="height: 50%; align-self: center">
                        <h6>{{courseDetail.teacher.name}}</h6>
                        <hr />
                        <p>{{courseDetail.teacher.intro}}</p>
                    </div>
                </div>
            </section>
            <!-- 左側資訊 end-->
            <!-- 右側購買連結 bg -->
            <div class="col-md-5 col-lg-4 mb-5">
                <div class="ps-3 pe-3 border rounded shadow">
                    <img :src="formatThumbnailUrl(courseDetail.thumbnail, `course`)"
                         alt="thumbnail"
                         class="img-fluid mt-3 mb-4 rounded" />
                    <h2>{{courseDetail.title}}</h2>
                    <h2>NT${{courseDetail.price}}</h2>
                    <div class="d-flex justify-content-between">
                        @if (ViewData["IsLoggedIn"] != null && (bool)ViewData["IsLoggedIn"])
                        {
                            <a :href="`@Url.Action("Checkout", "Members")`"
                               class="buyBtn btn btn-warning fs-2 fw-bolder text-dark mb-3 text-nowrap">
                                立即購買
                            </a>}
                        else
                        {
                            <button class="buyBtn btn btn-warning fs-2 fw-bolder text-dark mb-3 text-nowrap" v-on:click="showModal">
                                立即購買
                            </button>
                        }
                        <button class="rounded btn border mb-3">
                            <img src="~/images/cart.png"
                                 alt="cart"
                                 class="cartIcon img-fluid" />
                        </button>
                    </div>
                </div>
            </div>
            <!-- 右側購買連結 end -->
        </div>
    </div>
</div>



<!-- Modal 結構 -->


@section scripts{
    <script src="~/Scripts/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/vue.global.js"></script>
    <script src="~/Scripts/myheader.js"></script>
   
    <script>

            const { createApp, ref, onMounted } = Vue;
            const config = {
                setup() {
                    const isModalVisible = ref(false) 

                    function showModal() {
                        isModalVisible.value = true;
                    }

                    function hideModal() {
                        isModalVisible.value = false;
                    }

                    const Bookmark = ref({
                        isBooked: false,
                        defaultImg: "~/images/book_w.png",
                        bookedImg: "~/images/booked_w.png",
                        currentImage() {
                            return this.isBooked ? this.bookedImg : this.defaultImg;
                        },
                    });

                    const checkIsCollection = async () => { // 判斷會員是否有收藏課程
                        try {
                            const response = await fetch(`/api/collections/${memberId}`);
                            const data = await response.json();

                            Bookmark.value.isBooked = data.some((collection) => collection.courseId === courseId);
                        } catch (error) {
                            console.error("fetch 收藏課程失敗", error);
                        }
                    };

                    const toggleBookmark = async () => {
                        try {
                            if (Bookmark.value.isBooked) {
                                // 移除收藏
                                await fetch(`/api/updateCollections/${courseId}/${memberId}`, {
                                    method: 'DELETE',
                                });
                                Bookmark.value.isBooked = false;
                            } else {
                                // 新增收藏
                                const response = await fetch(`/api/updateCollections`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        memberId: memberId,
                                        courseId: courseId,
                                    }),
                                });
                                if (response.ok) {
                                    Bookmark.value.isBooked = true;
                                } else {
                                    console.error("新增收藏失敗");
                                }
                            }
                        } catch (error) {
                            console.error("切換收藏狀態失敗", error);
                        }
                    };


                    const videoPlayer = ref(null);
                    function checkVideoTime() {
                        if (videoPlayer.value && videoPlayer.value.currentTime >= 10) {
                            videoPlayer.value.currentTime = 0;
                        }
                    }
                    onMounted(() => {
                        if (videoPlayer.value) {
                            videoPlayer.value.addEventListener('timeupdate', checkVideoTime);
                        }

                        fetchCourseInfo(courseId);
                        checkIsCollection();
                    });


                    const formatThumbnailUrl = (thumbnailPath, target = "people") => {

                        thumbnailPath = handleThumbnailNull(thumbnailPath, target);

                        if (thumbnailPath.startsWith("~/")) {
                            // 將 "~/" 替換為實際的程式根目錄
                            return thumbnailPath.replace("~", window.location.origin);
                        }
                        return thumbnailPath;
                    };

                    const handleThumbnailNull = (path, target) => {
                        if (path == null || path.length == 0) { // 如果thumbnail是null 或沒有內容

                            // 判斷target是人(teacher 或 member) 或是課程，給予不同的default圖片路徑
                            target === "people" ? path = "~/images/profilePic.PNG"
                                : path = "~/images/thumbnail.jpg"; // 設成default thumbnail
                        }

                        return path;
                    }

                    const formatVideoRoute = (videoRoute) => {

                        if (videoRoute.startsWith("~/")) {
                            // 將 "~/" 替換為實際的程式根目錄
                            return videoRoute.replace("~", window.location.origin);
                        }
                        return videoRoute;
                    };

                    const courseContents = ref([]);
                    const  courseId = @Html.Raw(ViewBag.ProductId);
                    const fetchCourseInfo = async (courseId) => {
                        try {

                            const response = await fetch(`/api/products/productinfo/${courseId}`, {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            const courseInfo = await response.json();

                            courseContents.value = courseInfo.courseContent;
                            courseDetail.value = courseInfo.courseDetail;
                            courseFirstVideo.value = courseInfo.firstVideo;
                            courseBuyerCount.value = courseInfo.buyerCount;
                            courseChapterCount.value = courseInfo.chapterCount;
                        }
                        catch (error) {
                            console.error('Error fetching ProductInfo:', error);
                        }
                    };


                    const courseDetail = ref([]);
                    const courseFirstVideo = ref();
                    const courseBuyerCount = ref();
                    const courseChapterCount = ref();


                    return {
                        courseContents, courseDetail, videoPlayer, checkVideoTime,
                        courseFirstVideo, courseBuyerCount, courseChapterCount,
                        formatThumbnailUrl, Bookmark, toggleBookmark, formatVideoRoute, isModalVisible, showModal, hideModal
                    };
                },
            };

            const app = createApp(config);
            app.mount("#app");
    </script>
}
